/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DockerfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Dockerfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsInstructionParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final RuleCall cNLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Dockerfile:
		//	(statements+=Instruction NL)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(statements+=Instruction NL)*
		public Group getGroup() { return cGroup; }
		
		//statements+=Instruction
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Instruction
		public RuleCall getStatementsInstructionParserRuleCall_0_0() { return cStatementsInstructionParserRuleCall_0_0; }
		
		//NL
		public RuleCall getNLTerminalRuleCall_1() { return cNLTerminalRuleCall_1; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Instruction");
		private final Assignment cStatementAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cStatementAlternatives_0 = (Alternatives)cStatementAssignment.eContents().get(0);
		private final RuleCall cStatementFromParserRuleCall_0_0 = (RuleCall)cStatementAlternatives_0.eContents().get(0);
		private final RuleCall cStatementCmdParserRuleCall_0_1 = (RuleCall)cStatementAlternatives_0.eContents().get(1);
		private final RuleCall cStatementEntrypointParserRuleCall_0_2 = (RuleCall)cStatementAlternatives_0.eContents().get(2);
		private final RuleCall cStatementVolumeParserRuleCall_0_3 = (RuleCall)cStatementAlternatives_0.eContents().get(3);
		private final RuleCall cStatementMaintainerParserRuleCall_0_4 = (RuleCall)cStatementAlternatives_0.eContents().get(4);
		private final RuleCall cStatementExposeParserRuleCall_0_5 = (RuleCall)cStatementAlternatives_0.eContents().get(5);
		private final RuleCall cStatementWorkdirParserRuleCall_0_6 = (RuleCall)cStatementAlternatives_0.eContents().get(6);
		private final RuleCall cStatementRunParserRuleCall_0_7 = (RuleCall)cStatementAlternatives_0.eContents().get(7);
		private final RuleCall cStatementEnvParserRuleCall_0_8 = (RuleCall)cStatementAlternatives_0.eContents().get(8);
		private final RuleCall cStatementLabelParserRuleCall_0_9 = (RuleCall)cStatementAlternatives_0.eContents().get(9);
		private final RuleCall cStatementAddParserRuleCall_0_10 = (RuleCall)cStatementAlternatives_0.eContents().get(10);
		private final RuleCall cStatementCopyParserRuleCall_0_11 = (RuleCall)cStatementAlternatives_0.eContents().get(11);
		
		//Instruction:
		//	statement=(From | Cmd | Entrypoint | Volume | Maintainer | Expose | Workdir | Run | Env | Label | Add | Copy);
		@Override public ParserRule getRule() { return rule; }
		
		//statement=(From | Cmd | Entrypoint | Volume | Maintainer | Expose | Workdir | Run | Env | Label | Add | Copy)
		public Assignment getStatementAssignment() { return cStatementAssignment; }
		
		//(From | Cmd | Entrypoint | Volume | Maintainer | Expose | Workdir | Run | Env | Label | Add | Copy)
		public Alternatives getStatementAlternatives_0() { return cStatementAlternatives_0; }
		
		//From
		public RuleCall getStatementFromParserRuleCall_0_0() { return cStatementFromParserRuleCall_0_0; }
		
		//Cmd
		public RuleCall getStatementCmdParserRuleCall_0_1() { return cStatementCmdParserRuleCall_0_1; }
		
		//Entrypoint
		public RuleCall getStatementEntrypointParserRuleCall_0_2() { return cStatementEntrypointParserRuleCall_0_2; }
		
		//Volume
		public RuleCall getStatementVolumeParserRuleCall_0_3() { return cStatementVolumeParserRuleCall_0_3; }
		
		//Maintainer
		public RuleCall getStatementMaintainerParserRuleCall_0_4() { return cStatementMaintainerParserRuleCall_0_4; }
		
		//Expose
		public RuleCall getStatementExposeParserRuleCall_0_5() { return cStatementExposeParserRuleCall_0_5; }
		
		//Workdir
		public RuleCall getStatementWorkdirParserRuleCall_0_6() { return cStatementWorkdirParserRuleCall_0_6; }
		
		//Run
		public RuleCall getStatementRunParserRuleCall_0_7() { return cStatementRunParserRuleCall_0_7; }
		
		//Env
		public RuleCall getStatementEnvParserRuleCall_0_8() { return cStatementEnvParserRuleCall_0_8; }
		
		//Label
		public RuleCall getStatementLabelParserRuleCall_0_9() { return cStatementLabelParserRuleCall_0_9; }
		
		//Add
		public RuleCall getStatementAddParserRuleCall_0_10() { return cStatementAddParserRuleCall_0_10; }
		
		//Copy
		public RuleCall getStatementCopyParserRuleCall_0_11() { return cStatementCopyParserRuleCall_0_11; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyFROMKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cPlatform_optionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPlatform_optionPLATFORM_OPTIONTerminalRuleCall_1_0 = (RuleCall)cPlatform_optionAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIMAGE_NAMEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTag_or_digestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTag_or_digestAlternatives_3_0 = (Alternatives)cTag_or_digestAssignment_3.eContents().get(0);
		private final RuleCall cTag_or_digestIMAGE_TAGParserRuleCall_3_0_0 = (RuleCall)cTag_or_digestAlternatives_3_0.eContents().get(0);
		private final RuleCall cTag_or_digestIMAGE_DIGESTParserRuleCall_3_0_1 = (RuleCall)cTag_or_digestAlternatives_3_0.eContents().get(1);
		
		//From Statement:
		//	key='FROM ' platform_option=PLATFORM_OPTION? name=IMAGE_NAME tag_or_digest=(IMAGE_TAG | IMAGE_DIGEST)?;
		@Override public ParserRule getRule() { return rule; }
		
		//key='FROM ' platform_option=PLATFORM_OPTION? name=IMAGE_NAME tag_or_digest=(IMAGE_TAG | IMAGE_DIGEST)?
		public Group getGroup() { return cGroup; }
		
		//key='FROM '
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'FROM '
		public Keyword getKeyFROMKeyword_0_0() { return cKeyFROMKeyword_0_0; }
		
		//platform_option=PLATFORM_OPTION?
		public Assignment getPlatform_optionAssignment_1() { return cPlatform_optionAssignment_1; }
		
		//PLATFORM_OPTION
		public RuleCall getPlatform_optionPLATFORM_OPTIONTerminalRuleCall_1_0() { return cPlatform_optionPLATFORM_OPTIONTerminalRuleCall_1_0; }
		
		//name=IMAGE_NAME
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IMAGE_NAME
		public RuleCall getNameIMAGE_NAMEParserRuleCall_2_0() { return cNameIMAGE_NAMEParserRuleCall_2_0; }
		
		//tag_or_digest=(IMAGE_TAG | IMAGE_DIGEST)?
		public Assignment getTag_or_digestAssignment_3() { return cTag_or_digestAssignment_3; }
		
		//(IMAGE_TAG | IMAGE_DIGEST)
		public Alternatives getTag_or_digestAlternatives_3_0() { return cTag_or_digestAlternatives_3_0; }
		
		//IMAGE_TAG
		public RuleCall getTag_or_digestIMAGE_TAGParserRuleCall_3_0_0() { return cTag_or_digestIMAGE_TAGParserRuleCall_3_0_0; }
		
		//IMAGE_DIGEST
		public RuleCall getTag_or_digestIMAGE_DIGESTParserRuleCall_3_0_1() { return cTag_or_digestIMAGE_DIGESTParserRuleCall_3_0_1; }
	}
	public class CmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Cmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyCMDKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExec_formAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExec_formEXEC_FORMParserRuleCall_1_0_0 = (RuleCall)cExec_formAssignment_1_0.eContents().get(0);
		private final Assignment cShell_formAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cShell_formSHELL_CMDTerminalRuleCall_1_1_0 = (RuleCall)cShell_formAssignment_1_1.eContents().get(0);
		
		//Cmd Statement:
		//	key='CMD' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
		@Override public ParserRule getRule() { return rule; }
		
		//key='CMD' (exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Group getGroup() { return cGroup; }
		
		//key='CMD'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'CMD'
		public Keyword getKeyCMDKeyword_0_0() { return cKeyCMDKeyword_0_0; }
		
		//(exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exec_form=EXEC_FORM
		public Assignment getExec_formAssignment_1_0() { return cExec_formAssignment_1_0; }
		
		//EXEC_FORM
		public RuleCall getExec_formEXEC_FORMParserRuleCall_1_0_0() { return cExec_formEXEC_FORMParserRuleCall_1_0_0; }
		
		//shell_form=SHELL_CMD
		public Assignment getShell_formAssignment_1_1() { return cShell_formAssignment_1_1; }
		
		//SHELL_CMD
		public RuleCall getShell_formSHELL_CMDTerminalRuleCall_1_1_0() { return cShell_formSHELL_CMDTerminalRuleCall_1_1_0; }
	}
	public class RunElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Run");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyRUNKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExec_formAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExec_formEXEC_FORMParserRuleCall_1_0_0 = (RuleCall)cExec_formAssignment_1_0.eContents().get(0);
		private final Assignment cShell_formAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cShell_formSHELL_CMDTerminalRuleCall_1_1_0 = (RuleCall)cShell_formAssignment_1_1.eContents().get(0);
		
		//Run Statement:
		//	key='RUN' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
		@Override public ParserRule getRule() { return rule; }
		
		//key='RUN' (exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Group getGroup() { return cGroup; }
		
		//key='RUN'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'RUN'
		public Keyword getKeyRUNKeyword_0_0() { return cKeyRUNKeyword_0_0; }
		
		//(exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exec_form=EXEC_FORM
		public Assignment getExec_formAssignment_1_0() { return cExec_formAssignment_1_0; }
		
		//EXEC_FORM
		public RuleCall getExec_formEXEC_FORMParserRuleCall_1_0_0() { return cExec_formEXEC_FORMParserRuleCall_1_0_0; }
		
		//shell_form=SHELL_CMD
		public Assignment getShell_formAssignment_1_1() { return cShell_formAssignment_1_1; }
		
		//SHELL_CMD
		public RuleCall getShell_formSHELL_CMDTerminalRuleCall_1_1_0() { return cShell_formSHELL_CMDTerminalRuleCall_1_1_0; }
	}
	public class EntrypointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entrypoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyENTRYPOINTKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExec_formAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExec_formEXEC_FORMParserRuleCall_1_0_0 = (RuleCall)cExec_formAssignment_1_0.eContents().get(0);
		private final Assignment cShell_formAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cShell_formSHELL_CMDTerminalRuleCall_1_1_0 = (RuleCall)cShell_formAssignment_1_1.eContents().get(0);
		
		//Entrypoint Statement:
		//	key='ENTRYPOINT' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
		@Override public ParserRule getRule() { return rule; }
		
		//key='ENTRYPOINT' (exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Group getGroup() { return cGroup; }
		
		//key='ENTRYPOINT'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'ENTRYPOINT'
		public Keyword getKeyENTRYPOINTKeyword_0_0() { return cKeyENTRYPOINTKeyword_0_0; }
		
		//(exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exec_form=EXEC_FORM
		public Assignment getExec_formAssignment_1_0() { return cExec_formAssignment_1_0; }
		
		//EXEC_FORM
		public RuleCall getExec_formEXEC_FORMParserRuleCall_1_0_0() { return cExec_formEXEC_FORMParserRuleCall_1_0_0; }
		
		//shell_form=SHELL_CMD
		public Assignment getShell_formAssignment_1_1() { return cShell_formAssignment_1_1; }
		
		//SHELL_CMD
		public RuleCall getShell_formSHELL_CMDTerminalRuleCall_1_1_0() { return cShell_formSHELL_CMDTerminalRuleCall_1_1_0; }
	}
	public class VolumeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Volume");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyVOLUMEKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cExec_formAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cExec_formEXEC_FORMParserRuleCall_1_0_0 = (RuleCall)cExec_formAssignment_1_0.eContents().get(0);
		private final Assignment cShell_formAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cShell_formSHELL_CMDTerminalRuleCall_1_1_0 = (RuleCall)cShell_formAssignment_1_1.eContents().get(0);
		
		//Volume Statement:
		//	key='VOLUME' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
		@Override public ParserRule getRule() { return rule; }
		
		//key='VOLUME' (exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Group getGroup() { return cGroup; }
		
		//key='VOLUME'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'VOLUME'
		public Keyword getKeyVOLUMEKeyword_0_0() { return cKeyVOLUMEKeyword_0_0; }
		
		//(exec_form=EXEC_FORM | shell_form=SHELL_CMD)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//exec_form=EXEC_FORM
		public Assignment getExec_formAssignment_1_0() { return cExec_formAssignment_1_0; }
		
		//EXEC_FORM
		public RuleCall getExec_formEXEC_FORMParserRuleCall_1_0_0() { return cExec_formEXEC_FORMParserRuleCall_1_0_0; }
		
		//shell_form=SHELL_CMD
		public Assignment getShell_formAssignment_1_1() { return cShell_formAssignment_1_1; }
		
		//SHELL_CMD
		public RuleCall getShell_formSHELL_CMDTerminalRuleCall_1_1_0() { return cShell_formSHELL_CMDTerminalRuleCall_1_1_0; }
	}
	public class MaintainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Maintainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyMAINTAINERKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSHELL_CMDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Maintainer Statement:
		//	key='MAINTAINER' name=SHELL_CMD;
		@Override public ParserRule getRule() { return rule; }
		
		//key='MAINTAINER' name=SHELL_CMD
		public Group getGroup() { return cGroup; }
		
		//key='MAINTAINER'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'MAINTAINER'
		public Keyword getKeyMAINTAINERKeyword_0_0() { return cKeyMAINTAINERKeyword_0_0; }
		
		//name=SHELL_CMD
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SHELL_CMD
		public RuleCall getNameSHELL_CMDTerminalRuleCall_1_0() { return cNameSHELL_CMDTerminalRuleCall_1_0; }
	}
	public class ExposeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Expose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyEXPOSEKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsSHELL_CMDTerminalRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		
		//Expose Statement:
		//	key='EXPOSE' ports=SHELL_CMD;
		@Override public ParserRule getRule() { return rule; }
		
		//key='EXPOSE' ports=SHELL_CMD
		public Group getGroup() { return cGroup; }
		
		//key='EXPOSE'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'EXPOSE'
		public Keyword getKeyEXPOSEKeyword_0_0() { return cKeyEXPOSEKeyword_0_0; }
		
		//ports=SHELL_CMD
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }
		
		//SHELL_CMD
		public RuleCall getPortsSHELL_CMDTerminalRuleCall_1_0() { return cPortsSHELL_CMDTerminalRuleCall_1_0; }
	}
	public class WorkdirElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Workdir");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyWORKDIRKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathSHELL_CMDTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Workdir Statement:
		//	key='WORKDIR' path=SHELL_CMD;
		@Override public ParserRule getRule() { return rule; }
		
		//key='WORKDIR' path=SHELL_CMD
		public Group getGroup() { return cGroup; }
		
		//key='WORKDIR'
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'WORKDIR'
		public Keyword getKeyWORKDIRKeyword_0_0() { return cKeyWORKDIRKeyword_0_0; }
		
		//path=SHELL_CMD
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//SHELL_CMD
		public RuleCall getPathSHELL_CMDTerminalRuleCall_1_0() { return cPathSHELL_CMDTerminalRuleCall_1_0; }
	}
	public class EnvElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Env");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyENVKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cKey_value_pairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0 = (RuleCall)cKey_value_pairsAssignment_1.eContents().get(0);
		
		//Env Statement:
		//	key='ENV ' key_value_pairs+=KV_PAIR_EQUALS+;
		@Override public ParserRule getRule() { return rule; }
		
		//key='ENV ' key_value_pairs+=KV_PAIR_EQUALS+
		public Group getGroup() { return cGroup; }
		
		//key='ENV '
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'ENV '
		public Keyword getKeyENVKeyword_0_0() { return cKeyENVKeyword_0_0; }
		
		//key_value_pairs+=KV_PAIR_EQUALS+
		public Assignment getKey_value_pairsAssignment_1() { return cKey_value_pairsAssignment_1; }
		
		//KV_PAIR_EQUALS
		public RuleCall getKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0() { return cKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyLABELKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cKey_value_pairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0 = (RuleCall)cKey_value_pairsAssignment_1.eContents().get(0);
		
		//Label Statement:
		//	key='LABEL ' key_value_pairs+=KV_PAIR_EQUALS+;
		@Override public ParserRule getRule() { return rule; }
		
		//key='LABEL ' key_value_pairs+=KV_PAIR_EQUALS+
		public Group getGroup() { return cGroup; }
		
		//key='LABEL '
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'LABEL '
		public Keyword getKeyLABELKeyword_0_0() { return cKeyLABELKeyword_0_0; }
		
		//key_value_pairs+=KV_PAIR_EQUALS+
		public Assignment getKey_value_pairsAssignment_1() { return cKey_value_pairsAssignment_1; }
		
		//KV_PAIR_EQUALS
		public RuleCall getKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0() { return cKey_value_pairsKV_PAIR_EQUALSTerminalRuleCall_1_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyADDKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cChown_optionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0 = (RuleCall)cChown_optionsAssignment_1.eContents().get(0);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileIDTerminalRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cAlternatives_3.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final Assignment cDirectoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectorySHELL_CMDTerminalRuleCall_4_0 = (RuleCall)cDirectoryAssignment_4.eContents().get(0);
		
		//Add Statement:
		//	key='ADD ' chown_options=CHOWN_OPTION? file=ID (('?' | '*') | '.' ID)? directory=SHELL_CMD;
		@Override public ParserRule getRule() { return rule; }
		
		//key='ADD ' chown_options=CHOWN_OPTION? file=ID (('?' | '*') | '.' ID)? directory=SHELL_CMD
		public Group getGroup() { return cGroup; }
		
		//key='ADD '
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'ADD '
		public Keyword getKeyADDKeyword_0_0() { return cKeyADDKeyword_0_0; }
		
		//chown_options=CHOWN_OPTION?
		public Assignment getChown_optionsAssignment_1() { return cChown_optionsAssignment_1; }
		
		//CHOWN_OPTION
		public RuleCall getChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0() { return cChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0; }
		
		//file=ID
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//ID
		public RuleCall getFileIDTerminalRuleCall_2_0() { return cFileIDTerminalRuleCall_2_0; }
		
		//(('?' | '*') | '.' ID)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//('?' | '*')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_3_0_0() { return cQuestionMarkKeyword_3_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_0_1() { return cAsteriskKeyword_3_0_1; }
		
		//'.' ID
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_1_0() { return cFullStopKeyword_3_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3_1_1() { return cIDTerminalRuleCall_3_1_1; }
		
		//directory=SHELL_CMD
		public Assignment getDirectoryAssignment_4() { return cDirectoryAssignment_4; }
		
		//SHELL_CMD
		public RuleCall getDirectorySHELL_CMDTerminalRuleCall_4_0() { return cDirectorySHELL_CMDTerminalRuleCall_4_0; }
	}
	public class CopyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Copy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyCOPYKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cChown_optionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0 = (RuleCall)cChown_optionsAssignment_1.eContents().get(0);
		private final Assignment cFileAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileIDTerminalRuleCall_2_0 = (RuleCall)cFileAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cQuestionMarkKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cDirectoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDirectorySHELL_CMDTerminalRuleCall_5_0 = (RuleCall)cDirectoryAssignment_5.eContents().get(0);
		
		//Copy Statement:
		//	key='COPY ' chown_options=CHOWN_OPTION? file=ID ('?' | '*')? ('.' ID)? directory=SHELL_CMD;
		@Override public ParserRule getRule() { return rule; }
		
		//key='COPY ' chown_options=CHOWN_OPTION? file=ID ('?' | '*')? ('.' ID)? directory=SHELL_CMD
		public Group getGroup() { return cGroup; }
		
		//key='COPY '
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//'COPY '
		public Keyword getKeyCOPYKeyword_0_0() { return cKeyCOPYKeyword_0_0; }
		
		//chown_options=CHOWN_OPTION?
		public Assignment getChown_optionsAssignment_1() { return cChown_optionsAssignment_1; }
		
		//CHOWN_OPTION
		public RuleCall getChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0() { return cChown_optionsCHOWN_OPTIONTerminalRuleCall_1_0; }
		
		//file=ID
		public Assignment getFileAssignment_2() { return cFileAssignment_2; }
		
		//ID
		public RuleCall getFileIDTerminalRuleCall_2_0() { return cFileIDTerminalRuleCall_2_0; }
		
		//('?' | '*')?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_3_0() { return cQuestionMarkKeyword_3_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }
		
		//('.' ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }
		
		//directory=SHELL_CMD
		public Assignment getDirectoryAssignment_5() { return cDirectoryAssignment_5; }
		
		//SHELL_CMD
		public RuleCall getDirectorySHELL_CMDTerminalRuleCall_5_0() { return cDirectorySHELL_CMDTerminalRuleCall_5_0; }
	}
	public class IMAGE_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGE_NAME");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//IMAGE_NAME:
		//	ID ('/' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('/' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('/' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class IMAGE_TAGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGE_TAG");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cFullStopKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		
		//IMAGE_TAG:
		//	':' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
		@Override public ParserRule getRule() { return rule; }
		
		//':' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//(ID | INT | STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//(ID | INT | STRING | '-' | '.')*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_2() { return cSTRINGTerminalRuleCall_2_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_3() { return cHyphenMinusKeyword_2_3; }
		
		//'.'
		public Keyword getFullStopKeyword_2_4() { return cFullStopKeyword_2_4; }
	}
	public class IMAGE_DIGESTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.IMAGE_DIGEST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2_2 = (RuleCall)cAlternatives_2.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cFullStopKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		
		//IMAGE_DIGEST:
		//	'@' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//(ID | INT | STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//(ID | INT | STRING | '-' | '.')*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_2() { return cSTRINGTerminalRuleCall_2_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_3() { return cHyphenMinusKeyword_2_3; }
		
		//'.'
		public Keyword getFullStopKeyword_2_4() { return cFullStopKeyword_2_4; }
	}
	public class EXEC_FORMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXEC_FORM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExecutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExecutableSTRINGTerminalRuleCall_1_0 = (RuleCall)cExecutableAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersEXEC_FORM_PARAMETERTerminalRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EXEC_FORM:
		//	' [' executable=STRING parameters+=EXEC_FORM_PARAMETER* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//' [' executable=STRING parameters+=EXEC_FORM_PARAMETER* ']'
		public Group getGroup() { return cGroup; }
		
		//' ['
		public Keyword getSpaceLeftSquareBracketKeyword_0() { return cSpaceLeftSquareBracketKeyword_0; }
		
		//executable=STRING
		public Assignment getExecutableAssignment_1() { return cExecutableAssignment_1; }
		
		//STRING
		public RuleCall getExecutableSTRINGTerminalRuleCall_1_0() { return cExecutableSTRINGTerminalRuleCall_1_0; }
		
		//parameters+=EXEC_FORM_PARAMETER*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//EXEC_FORM_PARAMETER
		public RuleCall getParametersEXEC_FORM_PARAMETERTerminalRuleCall_2_0() { return cParametersEXEC_FORM_PARAMETERTerminalRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	
	
	private final DockerfileElements pDockerfile;
	private final InstructionElements pInstruction;
	private final FromElements pFrom;
	private final CmdElements pCmd;
	private final RunElements pRun;
	private final EntrypointElements pEntrypoint;
	private final VolumeElements pVolume;
	private final MaintainerElements pMaintainer;
	private final ExposeElements pExpose;
	private final WorkdirElements pWorkdir;
	private final EnvElements pEnv;
	private final LabelElements pLabel;
	private final AddElements pAdd;
	private final CopyElements pCopy;
	private final IMAGE_NAMEElements pIMAGE_NAME;
	private final IMAGE_TAGElements pIMAGE_TAG;
	private final IMAGE_DIGESTElements pIMAGE_DIGEST;
	private final TerminalRule tPLATFORM_OPTION;
	private final TerminalRule tCHOWN_OPTION;
	private final EXEC_FORMElements pEXEC_FORM;
	private final TerminalRule tKV_PAIR_EQUALS;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tNL;
	private final TerminalRule tEXEC_FORM_PARAMETER;
	private final TerminalRule tSHELL_CMD;
	private final TerminalRule tCOMMENT;
	
	private final Grammar grammar;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDockerfile = new DockerfileElements();
		this.pInstruction = new InstructionElements();
		this.pFrom = new FromElements();
		this.pCmd = new CmdElements();
		this.pRun = new RunElements();
		this.pEntrypoint = new EntrypointElements();
		this.pVolume = new VolumeElements();
		this.pMaintainer = new MaintainerElements();
		this.pExpose = new ExposeElements();
		this.pWorkdir = new WorkdirElements();
		this.pEnv = new EnvElements();
		this.pLabel = new LabelElements();
		this.pAdd = new AddElements();
		this.pCopy = new CopyElements();
		this.pIMAGE_NAME = new IMAGE_NAMEElements();
		this.pIMAGE_TAG = new IMAGE_TAGElements();
		this.pIMAGE_DIGEST = new IMAGE_DIGESTElements();
		this.tPLATFORM_OPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.PLATFORM_OPTION");
		this.tCHOWN_OPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.CHOWN_OPTION");
		this.pEXEC_FORM = new EXEC_FORMElements();
		this.tKV_PAIR_EQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.KV_PAIR_EQUALS");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.STRING");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.NL");
		this.tEXEC_FORM_PARAMETER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EXEC_FORM_PARAMETER");
		this.tSHELL_CMD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.SHELL_CMD");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Dockerfile:
	//	(statements+=Instruction NL)*;
	public DockerfileElements getDockerfileAccess() {
		return pDockerfile;
	}
	
	public ParserRule getDockerfileRule() {
		return getDockerfileAccess().getRule();
	}
	
	//Instruction:
	//	statement=(From | Cmd | Entrypoint | Volume | Maintainer | Expose | Workdir | Run | Env | Label | Add | Copy);
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//From Statement:
	//	key='FROM ' platform_option=PLATFORM_OPTION? name=IMAGE_NAME tag_or_digest=(IMAGE_TAG | IMAGE_DIGEST)?;
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	//Cmd Statement:
	//	key='CMD' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
	public CmdElements getCmdAccess() {
		return pCmd;
	}
	
	public ParserRule getCmdRule() {
		return getCmdAccess().getRule();
	}
	
	//Run Statement:
	//	key='RUN' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
	public RunElements getRunAccess() {
		return pRun;
	}
	
	public ParserRule getRunRule() {
		return getRunAccess().getRule();
	}
	
	//Entrypoint Statement:
	//	key='ENTRYPOINT' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
	public EntrypointElements getEntrypointAccess() {
		return pEntrypoint;
	}
	
	public ParserRule getEntrypointRule() {
		return getEntrypointAccess().getRule();
	}
	
	//Volume Statement:
	//	key='VOLUME' (exec_form=EXEC_FORM | shell_form=SHELL_CMD);
	public VolumeElements getVolumeAccess() {
		return pVolume;
	}
	
	public ParserRule getVolumeRule() {
		return getVolumeAccess().getRule();
	}
	
	//Maintainer Statement:
	//	key='MAINTAINER' name=SHELL_CMD;
	public MaintainerElements getMaintainerAccess() {
		return pMaintainer;
	}
	
	public ParserRule getMaintainerRule() {
		return getMaintainerAccess().getRule();
	}
	
	//Expose Statement:
	//	key='EXPOSE' ports=SHELL_CMD;
	public ExposeElements getExposeAccess() {
		return pExpose;
	}
	
	public ParserRule getExposeRule() {
		return getExposeAccess().getRule();
	}
	
	//Workdir Statement:
	//	key='WORKDIR' path=SHELL_CMD;
	public WorkdirElements getWorkdirAccess() {
		return pWorkdir;
	}
	
	public ParserRule getWorkdirRule() {
		return getWorkdirAccess().getRule();
	}
	
	//Env Statement:
	//	key='ENV ' key_value_pairs+=KV_PAIR_EQUALS+;
	public EnvElements getEnvAccess() {
		return pEnv;
	}
	
	public ParserRule getEnvRule() {
		return getEnvAccess().getRule();
	}
	
	//Label Statement:
	//	key='LABEL ' key_value_pairs+=KV_PAIR_EQUALS+;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Add Statement:
	//	key='ADD ' chown_options=CHOWN_OPTION? file=ID (('?' | '*') | '.' ID)? directory=SHELL_CMD;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Copy Statement:
	//	key='COPY ' chown_options=CHOWN_OPTION? file=ID ('?' | '*')? ('.' ID)? directory=SHELL_CMD;
	public CopyElements getCopyAccess() {
		return pCopy;
	}
	
	public ParserRule getCopyRule() {
		return getCopyAccess().getRule();
	}
	
	//IMAGE_NAME:
	//	ID ('/' ID)*;
	public IMAGE_NAMEElements getIMAGE_NAMEAccess() {
		return pIMAGE_NAME;
	}
	
	public ParserRule getIMAGE_NAMERule() {
		return getIMAGE_NAMEAccess().getRule();
	}
	
	//IMAGE_TAG:
	//	':' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
	public IMAGE_TAGElements getIMAGE_TAGAccess() {
		return pIMAGE_TAG;
	}
	
	public ParserRule getIMAGE_TAGRule() {
		return getIMAGE_TAGAccess().getRule();
	}
	
	//IMAGE_DIGEST:
	//	'@' (ID | INT | STRING) (ID | INT | STRING | '-' | '.')*;
	public IMAGE_DIGESTElements getIMAGE_DIGESTAccess() {
		return pIMAGE_DIGEST;
	}
	
	public ParserRule getIMAGE_DIGESTRule() {
		return getIMAGE_DIGESTAccess().getRule();
	}
	
	//terminal PLATFORM_OPTION:
	//	'--platform=' (ID | INT) ':' ((ID | INT | STRING) (ID | INT | STRING | '-' | '.')*)? ' ';
	public TerminalRule getPLATFORM_OPTIONRule() {
		return tPLATFORM_OPTION;
	}
	
	//terminal CHOWN_OPTION:
	//	'--chown=' (ID | INT) ':' ((ID | INT | STRING) (ID | INT | STRING | '-' | '.')*)? ' ';
	public TerminalRule getCHOWN_OPTIONRule() {
		return tCHOWN_OPTION;
	}
	
	//EXEC_FORM:
	//	' [' executable=STRING parameters+=EXEC_FORM_PARAMETER* ']';
	public EXEC_FORMElements getEXEC_FORMAccess() {
		return pEXEC_FORM;
	}
	
	public ParserRule getEXEC_FORMRule() {
		return getEXEC_FORMAccess().getRule();
	}
	
	//terminal KV_PAIR_EQUALS:
	//	(ID | STRING) '=' (ID | STRING | INT) ' '?;
	public TerminalRule getKV_PAIR_EQUALSRule() {
		return tKV_PAIR_EQUALS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal NL:
	//	'\n' | '\r'+;
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal EXEC_FORM_PARAMETER:
	//	',' STRING;
	public TerminalRule getEXEC_FORM_PARAMETERRule() {
		return tEXEC_FORM_PARAMETER;
	}
	
	//terminal SHELL_CMD:
	//	(' ' | '\t') (!('\n' | '\r' | '\\') | '\\' ('\n' | '\r\n'))*;
	public TerminalRule getSHELL_CMDRule() {
		return tSHELL_CMD;
	}
	
	//terminal COMMENT:
	//	'#' !('\n' | '\r')*;
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
}
